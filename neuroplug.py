from serial import SerialException

from thinkgear import *
import bluepy.btle
import time
from multiprocessing import Queue, Process


payloads = {
    0: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x00\x64\x00\x04\x08\x40\x64\x01',
    1: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x01\x64\x00\x04\x08\x40\x64\x01',
    2: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x02\x64\x00\x04\x08\x40\x64\x01',
    3: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x03\x64\x00\x04\x08\x40\x64\x01',
    4: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x04\x64\x00\x04\x08\x40\x64\x01',
    5: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x05\x64\x00\x04\x08\x40\x64\x01',
    6: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x06\x64\x00\x04\x08\x40\x64\x01',
    7: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x07\x64\x00\x04\x08\x40\x64\x01',
    8: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x08\x64\x00\x04\x08\x40\x64\x01',
    9: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x09\x64\x00\x04\x08\x40\x64\x01',
    10: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x10\x64\x00\x04\x08\x40\x64\x01',

    11: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x11\x64\x00\x04\x08\x40\x64\x01',
    12: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x12\x64\x00\x04\x08\x40\x64\x01',
    13: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x13\x64\x00\x04\x08\x40\x64\x01',
    14: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x14\x64\x00\x04\x08\x40\x64\x01',
    15: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x15\x64\x00\x04\x08\x40\x64\x01',
    16: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x16\x64\x00\x04\x08\x40\x64\x01',
    17: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x17\x64\x00\x04\x08\x40\x64\x01',
    18: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x18\x64\x00\x04\x08\x40\x64\x01',
    19: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x19\x64\x00\x04\x08\x40\x64\x01',
    20: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x20\x64\x00\x04\x08\x40\x64\x01',

    21: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x21\x64\x00\x04\x08\x40\x64\x01',
    22: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x22\x64\x00\x04\x08\x40\x64\x01',
    23: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x23\x64\x00\x04\x08\x40\x64\x01',
    24: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x24\x64\x00\x04\x08\x40\x64\x01',
    25: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x25\x64\x00\x04\x08\x40\x64\x01',
    26: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x26\x64\x00\x04\x08\x40\x64\x01',
    27: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x27\x64\x00\x04\x08\x40\x64\x01',
    28: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x28\x64\x00\x04\x08\x40\x64\x01',
    29: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x29\x64\x00\x04\x08\x40\x64\x01',
    30: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x30\x64\x00\x04\x08\x40\x64\x01',

    31: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x31\x64\x00\x04\x08\x40\x64\x01',
    32: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x32\x64\x00\x04\x08\x40\x64\x01',
    33: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x33\x64\x00\x04\x08\x40\x64\x01',
    34: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x34\x64\x00\x04\x08\x40\x64\x01',
    35: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x35\x64\x00\x04\x08\x40\x64\x01',
    36: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x36\x64\x00\x04\x08\x40\x64\x01',
    37: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x37\x64\x00\x04\x08\x40\x64\x01',
    38: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x38\x64\x00\x04\x08\x40\x64\x01',
    39: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x39\x64\x00\x04\x08\x40\x64\x01',
    40: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x40\x64\x00\x04\x08\x40\x64\x01',

    41: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x41\x64\x00\x04\x08\x40\x64\x01',
    42: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x42\x64\x00\x04\x08\x40\x64\x01',
    43: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x43\x64\x00\x04\x08\x40\x64\x01',
    44: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x44\x64\x00\x04\x08\x40\x64\x01',
    45: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x45\x64\x00\x04\x08\x40\x64\x01',
    46: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x46\x64\x00\x04\x08\x40\x64\x01',
    47: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x47\x64\x00\x04\x08\x40\x64\x01',
    48: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x48\x64\x00\x04\x08\x40\x64\x01',
    49: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x49\x64\x00\x04\x08\x40\x64\x01',
    50: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x50\x64\x00\x04\x08\x40\x64\x01',

    51: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x51\x64\x00\x04\x08\x40\x64\x01',
    52: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x52\x64\x00\x04\x08\x40\x64\x01',
    53: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x53\x64\x00\x04\x08\x40\x64\x01',
    54: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x54\x64\x00\x04\x08\x40\x64\x01',
    55: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x55\x64\x00\x04\x08\x40\x64\x01',
    56: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x56\x64\x00\x04\x08\x40\x64\x01',
    57: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x57\x64\x00\x04\x08\x40\x64\x01',
    58: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x58\x64\x00\x04\x08\x40\x64\x01',
    59: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x59\x64\x00\x04\x08\x40\x64\x01',
    60: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x60\x64\x00\x04\x08\x40\x64\x01',

    61: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x61\x64\x00\x04\x08\x40\x64\x01',
    62: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x62\x64\x00\x04\x08\x40\x64\x01',
    63: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x63\x64\x00\x04\x08\x40\x64\x01',
    64: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x64\x64\x00\x04\x08\x40\x64\x01',
    65: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x65\x64\x00\x04\x08\x40\x64\x01',
    66: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x66\x64\x00\x04\x08\x40\x64\x01',
    67: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x67\x64\x00\x04\x08\x40\x64\x01',
    68: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x68\x64\x00\x04\x08\x40\x64\x01',
    69: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x69\x64\x00\x04\x08\x40\x64\x01',
    70: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x70\x64\x00\x04\x08\x40\x64\x01',

    71: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x71\x64\x00\x04\x08\x40\x64\x01',
    72: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x72\x64\x00\x04\x08\x40\x64\x01',
    73: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x73\x64\x00\x04\x08\x40\x64\x01',
    74: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x74\x64\x00\x04\x08\x40\x64\x01',
    75: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x75\x64\x00\x04\x08\x40\x64\x01',
    76: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x76\x64\x00\x04\x08\x40\x64\x01',
    77: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x77\x64\x00\x04\x08\x40\x64\x01',
    78: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x78\x64\x00\x04\x08\x40\x64\x01',
    79: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x79\x64\x00\x04\x08\x40\x64\x01',
    80: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x80\x64\x00\x04\x08\x40\x64\x01',

    81: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x81\x64\x00\x04\x08\x40\x64\x01',
    82: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x82\x64\x00\x04\x08\x40\x64\x01',
    83: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x83\x64\x00\x04\x08\x40\x64\x01',
    84: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x84\x64\x00\x04\x08\x40\x64\x01',
    85: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x85\x64\x00\x04\x08\x40\x64\x01',
    86: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x86\x64\x00\x04\x08\x40\x64\x01',
    87: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x87\x64\x00\x04\x08\x40\x64\x01',
    88: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x88\x64\x00\x04\x08\x40\x64\x01',
    89: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x89\x64\x00\x04\x08\x40\x64\x01',
    90: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x90\x64\x00\x04\x08\x40\x64\x01',

    91: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x91\x64\x00\x04\x08\x40\x64\x01',
    92: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x92\x64\x00\x04\x08\x40\x64\x01',
    93: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x93\x64\x00\x04\x08\x40\x64\x01',
    94: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x94\x64\x00\x04\x08\x40\x64\x01',
    95: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x95\x64\x00\x04\x08\x40\x64\x01',
    96: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x96\x64\x00\x04\x08\x40\x64\x01',
    97: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x97\x64\x00\x04\x08\x40\x64\x01',
    98: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x98\x64\x00\x04\x08\x40\x64\x01',
    99: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x99\x64\x00\x04\x08\x40\x64\x01',
    100: b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x100\x64\x00\x04\x08\x40\x64\x01',
}


def start_reading(queue):
    fugu1 = bluepy.btle.Peripheral(iface='hci0')
    print('Connecting fo FUGU')
    fugu1.connect(addr='D8:A9:8B:C2:63:EF', addrType=bluepy.btle.ADDR_TYPE_PUBLIC)
    print('Connected')

    previous_value = 1

    while True:
        if not queue.empty():
            value = queue.get()
            print('Value:', value)
            if value > previous_value:
                for level in range(previous_value, value, 1):
                    time.sleep(0.07)
                    print('level', level)
                    fugu1.writeCharacteristic(handle=3, val=payloads[level])
            else:
                for level in range(previous_value, value, -1):
                    time.sleep(0.07)
                    print('level', level)
                    fugu1.writeCharacteristic(handle=3, val=payloads[level])
            previous_value = value
        else:
            time.sleep(0.1)


def start_writing(queue):
    tg = ThinkGearProtocol('/dev/rfcomm1')
    print('Reading ThinkGear messages')
    for pkt in tg.get_packets():
        for attention_data in pkt:
            if isinstance(attention_data, ThinkGearAttentionData):
                print('Attention:' + str(attention_data.value))
                queue.put(attention_data.value)


if __name__ == '__main__':
    try:
        #Beg ins RFcomm handling
        import subprocess
        #p = subprocess.Popen("rfcomm -i hci0 -r connect /dev/rfcomm1 0D:00:18:A1:54:15 2", shell=True)
        #End ins RFcomm handling
        queue1 = Queue()

        writer_process = Process(target=start_writing, args=(queue1,))
        writer_process.daemon = True
        writer_process.start()
        time.sleep(3)
        start_reading(queue1)
        writer_process.join()
    except KeyboardInterrupt:
        print('KeyboardInterrupt')
        fugu = bluepy.btle.Peripheral()
        fugu.connect(addr='D8:A9:8B:C2:63:EF', addrType=bluepy.btle.ADDR_TYPE_PUBLIC)
        # hci1 to ble send commands
        print('Sending STOP command and disconnect')
        fugu.writeCharacteristic(handle=3, val=b'\x10\xff\x04\x0a\x32\x32\x00\x04\x08\x00\x64\x00\x04\x08\x00\x64\x01')
        fugu.disconnect()
    except SerialException:
        print('Reconnect Brainwave to /dev/rfcomm')
